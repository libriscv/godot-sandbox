#!/usr/bin/env python
Import("env")
Import("env_modules")

ARGUMENTS["disable_exceptions"] = "0"

env_gdextension = env_modules.Clone()
#env = SConscript("ext/godot-cpp/SConstruct")
GODOT_CPP_PATH = "#modules/sandbox/ext/godot-cpp"  # Update this to match your actual path

# Generate Godot bindings for godot-cpp
env_gdextension.Command(
    target=[GODOT_CPP_PATH + "/include"],
    source=[GODOT_CPP_PATH + "/SConstruct"],
    action="scons -C {} platform={} target={} generate_bindings=yes".format(
        GODOT_CPP_PATH, env["platform"], env["target"]
    )
)
# Include godot-cpp in the build process
env_gdextension.Append(CPPPATH=[GODOT_CPP_PATH + "/include"])
env_gdextension.Append(LIBPATH=[GODOT_CPP_PATH + "/bin"])

env_gdextension.Prepend(CPPPATH=[GODOT_CPP_PATH, f"{GODOT_CPP_PATH}/include"])
env_gdextension.Append(CPPDEFINES = ['RISCV_SYSCALLS_MAX=600', 'RISCV_BRK_MEMORY_SIZE=0x100000'])
env_gdextension.Prepend(CPPPATH=["ext/libriscv/lib"])
env_gdextension.Append(CPPPATH=["src/", "."])

sources = [Glob("src/*.cpp"), Glob("src/cpp/*.cpp"), Glob("src/rust/*.cpp"), Glob("src/zig/*.cpp"), Glob("src/elf/*.cpp"), Glob("src/godot/*.cpp"), ["src/tests/dummy_assault.cpp"], Glob("src/bintr/*.cpp")]

librisc_sources = [
	# threaded fast-path:
	"ext/libriscv/lib/libriscv/threaded_dispatch.cpp",

	"ext/libriscv/lib/libriscv/cpu.cpp",
	"ext/libriscv/lib/libriscv/debug.cpp",
	"ext/libriscv/lib/libriscv/decode_bytecodes.cpp",
	"ext/libriscv/lib/libriscv/decoder_cache.cpp",
	"ext/libriscv/lib/libriscv/machine.cpp",
	"ext/libriscv/lib/libriscv/machine_defaults.cpp",
	"ext/libriscv/lib/libriscv/memory.cpp",
	"ext/libriscv/lib/libriscv/memory_elf.cpp",
	"ext/libriscv/lib/libriscv/memory_mmap.cpp",
	"ext/libriscv/lib/libriscv/memory_rw.cpp",
	"ext/libriscv/lib/libriscv/multiprocessing.cpp",
	"ext/libriscv/lib/libriscv/native_libc.cpp",
	"ext/libriscv/lib/libriscv/native_threads.cpp",
	#"ext/libriscv/lib/libriscv/rv32i.cpp",
	"ext/libriscv/lib/libriscv/rv64i.cpp",
	"ext/libriscv/lib/libriscv/serialize.cpp",

	# POSIX
	"ext/libriscv/lib/libriscv/posix/minimal.cpp",
	"ext/libriscv/lib/libriscv/posix/signals.cpp",
	"ext/libriscv/lib/libriscv/posix/threads.cpp",
	"ext/libriscv/lib/libriscv/util/crc32c.cpp",

	# Binary translator
	"ext/libriscv/lib/libriscv/tr_api.cpp",
	"ext/libriscv/lib/libriscv/tr_emit.cpp",
	"ext/libriscv/lib/libriscv/tr_translate.cpp",
]

if env_gdextension["platform"] == "windows":
    librisc_sources += [
        "ext/libriscv/lib/libriscv/win32/dlfcn.cpp",
        "ext/libriscv/lib/libriscv/win32/system_calls.cpp",
        "ext/libriscv/lib/libriscv/win32/tr_msvc.cpp",
    ]
else:
    librisc_sources += [
        "ext/libriscv/lib/libriscv/linux/system_calls.cpp",

		# Binary translator - TCC
		#"ext/libriscv/lib/libriscv/tr_tcc.cpp"
		# Binary translator - System compiler
		"ext/libriscv/lib/libriscv/tr_compiler.cpp",
    ]

if env_gdextension["platform"] != "windows" or env["use_mingw"]:
    env_gdextension.Append(CXXFLAGS=["-std=c++20"])
else:
    env_gdextension.Append(CXXFLAGS=["/std:c++20"])

sources.extend(librisc_sources)

if env_gdextension["platform"] == "windows":
	env_gdextension.Prepend(CPPPATH=["ext/libriscv/lib/libriscv/lib/win32"])
elif env_gdextension["platform"] == "macos":
    env_gdextension.Prepend(CPPPATH=["ext/libriscv/lib/libriscv/lib/macos"])
elif env_gdextension["platform"] == "linux" or env["platform"] == "android":
    env_gdextension.Prepend(CPPPATH=["ext/libriscv/lib/libriscv/lib/linux"])

# Add source files from src
env.modules_sources.append(sources)
# Add register_types
env_gdextension.add_source_files(env.modules_sources, "*.cpp")
